name: Build & Deploy code

on: [push, pull_request]

jobs:
  build:
    environment:
      name: github-actions-testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      JWT_SECRET_KEY: ${{secrets.JWT_SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: Pulls git repo
        uses: actions/checkout@v4
      - name: Setup python3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Update pip
        run: python -m pip install --upgrade pip 
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run pytest
        run: |
          pip install pytest
          pytest -v -s

      # This part works but since we don't use Docker to host PRODUCTION_ENV we'll keep it off for faster performance.
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{secrets.DOCKER_USERNAME}}
      #     password: ${{secrets.DOCKERHUB_TOKEN}}
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: ${{secrets.DOCKER_USERNAME}}/fastapi:latest
      # - name: Image digest
      #   run: echo ${{steps.docker_build.outputs.digest}}

  deploy:
    needs: [build]
    environment: 
      name: production
    runs-on: ubuntu-latest
    steps:
    - name: Deploying on Ubuntu server
      run: echo "Deploying on Ubuntu server"
    - name: Executing remote ssh commands using password
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{secrets.PROD_HOST}}
        username: ${{secrets.PROD_USERNAME}}
        password: ${{secrets.PROD_PASSWORD}}
        script: |
          cd fastapi-app/src
          git pull
          echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api


